# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:45:05+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccountId(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class ActionPrefix(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ActionsEnabled(RootModel[bool]):
    root: bool


class ActionsSuppressedBy(Enum):
    WaitPeriod = 'WaitPeriod'
    ExtensionPeriod = 'ExtensionPeriod'
    Alarm = 'Alarm'


class ActionsSuppressedReason(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class AlarmArn(RootModel[constr(min_length=1, max_length=1600)]):
    root: constr(min_length=1, max_length=1600)


class AlarmDescription(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class AlarmName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class AlarmNamePrefix(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class AlarmNames(RootModel[List[AlarmName]]):
    root: List[AlarmName] = Field(..., max_length=100)


class AlarmRule(RootModel[constr(min_length=1, max_length=10240)]):
    root: constr(min_length=1, max_length=10240)


class AlarmType(Enum):
    CompositeAlarm = 'CompositeAlarm'
    MetricAlarm = 'MetricAlarm'


class AlarmTypes(RootModel[List[AlarmType]]):
    root: List[AlarmType]


class AmazonResourceName(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class AnomalyDetectorMetricStat(
    RootModel[
        constr(
            pattern=r'(SampleCount|Average|Sum|Minimum|Maximum|IQM|(p|tc|tm|ts|wm)(\d{1,2}(\.\d{0,10})?|100)|[ou]\d+(\.\d*)?)(_E|_L|_H)?|(TM|TC|TS|WM)\(((((\d{1,2})(\.\d{0,10})?|100(\.0{0,10})?)%)?:((\d{1,2})(\.\d{0,10})?|100(\.0{0,10})?)%|((\d{1,2})(\.\d{0,10})?|100(\.0{0,10})?)%:(((\d{1,2})(\.\d{0,10})?|100(\.0{0,10})?)%)?)\)|(TM|TC|TS|WM|PR)\(((\d+(\.\d{0,10})?|(\d+(\.\d{0,10})?[Ee][+-]?\d+)):((\d+(\.\d{0,10})?|(\d+(\.\d{0,10})?[Ee][+-]?\d+)))?|((\d+(\.\d{0,10})?|(\d+(\.\d{0,10})?[Ee][+-]?\d+)))?:(\d+(\.\d{0,10})?|(\d+(\.\d{0,10})?[Ee][+-]?\d+)))\)',
            max_length=50,
        )
    ]
):
    root: constr(
        pattern=r'(SampleCount|Average|Sum|Minimum|Maximum|IQM|(p|tc|tm|ts|wm)(\d{1,2}(\.\d{0,10})?|100)|[ou]\d+(\.\d*)?)(_E|_L|_H)?|(TM|TC|TS|WM)\(((((\d{1,2})(\.\d{0,10})?|100(\.0{0,10})?)%)?:((\d{1,2})(\.\d{0,10})?|100(\.0{0,10})?)%|((\d{1,2})(\.\d{0,10})?|100(\.0{0,10})?)%:(((\d{1,2})(\.\d{0,10})?|100(\.0{0,10})?)%)?)\)|(TM|TC|TS|WM|PR)\(((\d+(\.\d{0,10})?|(\d+(\.\d{0,10})?[Ee][+-]?\d+)):((\d+(\.\d{0,10})?|(\d+(\.\d{0,10})?[Ee][+-]?\d+)))?|((\d+(\.\d{0,10})?|(\d+(\.\d{0,10})?[Ee][+-]?\d+)))?:(\d+(\.\d{0,10})?|(\d+(\.\d{0,10})?[Ee][+-]?\d+)))\)',
        max_length=50,
    )


class AnomalyDetectorMetricTimezone(RootModel[constr(pattern=r'.*', max_length=50)]):
    root: constr(pattern=r'.*', max_length=50)


class AnomalyDetectorStateValue(Enum):
    PENDING_TRAINING = 'PENDING_TRAINING'
    TRAINED_INSUFFICIENT_DATA = 'TRAINED_INSUFFICIENT_DATA'
    TRAINED = 'TRAINED'


class AnomalyDetectorType(Enum):
    SINGLE_METRIC = 'SINGLE_METRIC'
    METRIC_MATH = 'METRIC_MATH'


class AnomalyDetectorTypes(RootModel[List[AnomalyDetectorType]]):
    root: List[AnomalyDetectorType] = Field(..., max_length=2)


class ComparisonOperator(Enum):
    GreaterThanOrEqualToThreshold = 'GreaterThanOrEqualToThreshold'
    GreaterThanThreshold = 'GreaterThanThreshold'
    LessThanThreshold = 'LessThanThreshold'
    LessThanOrEqualToThreshold = 'LessThanOrEqualToThreshold'
    LessThanLowerOrGreaterThanUpperThreshold = (
        'LessThanLowerOrGreaterThanUpperThreshold'
    )
    LessThanLowerThreshold = 'LessThanLowerThreshold'
    GreaterThanUpperThreshold = 'GreaterThanUpperThreshold'


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class DashboardArn(RootModel[str]):
    root: str


class DashboardBody(RootModel[str]):
    root: str


class DashboardInvalidInputError(RootModel[Any]):
    root: Any


class DashboardName(RootModel[str]):
    root: str


class DashboardNamePrefix(RootModel[str]):
    root: str


class DashboardNames(RootModel[List[DashboardName]]):
    root: List[DashboardName]


class DashboardNotFoundError(RootModel[Any]):
    root: Any


class DataPath(RootModel[str]):
    root: str


class DatapointValue(RootModel[float]):
    root: float


class DatapointValueMap(RootModel[Optional[Dict[str, DatapointValue]]]):
    root: Optional[Dict[str, DatapointValue]] = None


class DatapointValues(RootModel[List[DatapointValue]]):
    root: List[DatapointValue]


class DatapointsToAlarm(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class DeleteAlarmsInput(BaseModel):
    AlarmNames_1: AlarmNames = Field(..., alias='AlarmNames')


class DeleteAnomalyDetectorOutput(BaseModel):
    pass


class DeleteDashboardsInput(BaseModel):
    DashboardNames_1: DashboardNames = Field(..., alias='DashboardNames')


class DeleteDashboardsOutput(BaseModel):
    pass


class DeleteMetricStreamOutput(BaseModel):
    pass


class DimensionName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class DimensionValue(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class DisableAlarmActionsInput(BaseModel):
    AlarmNames_1: AlarmNames = Field(..., alias='AlarmNames')


class EnableAlarmActionsInput(BaseModel):
    AlarmNames_1: AlarmNames = Field(..., alias='AlarmNames')


class EvaluateLowSampleCountPercentile(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class EvaluationPeriods(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class EvaluationState(Enum):
    PARTIAL_DATA = 'PARTIAL_DATA'


class ExceptionType(RootModel[str]):
    root: str


class ExtendedStatistic(RootModel[str]):
    root: str


class ExtendedStatistics(RootModel[List[ExtendedStatistic]]):
    root: List[ExtendedStatistic] = Field(..., max_length=10, min_length=1)


class FailureCode(RootModel[str]):
    root: str


class FailureDescription(RootModel[str]):
    root: str


class FailureResource(RootModel[str]):
    root: str


class GetDashboardInput(BaseModel):
    DashboardName_1: DashboardName = Field(..., alias='DashboardName')


class GetDashboardOutput(BaseModel):
    DashboardArn_1: Optional[DashboardArn] = Field(None, alias='DashboardArn')
    DashboardBody_1: Optional[DashboardBody] = Field(None, alias='DashboardBody')
    DashboardName_1: Optional[DashboardName] = Field(None, alias='DashboardName')


class GetMetricDataLabelTimezone(RootModel[str]):
    root: str


class GetMetricDataMaxDatapoints(RootModel[int]):
    root: int


class HistoryData(RootModel[constr(min_length=1, max_length=4095)]):
    root: constr(min_length=1, max_length=4095)


class HistoryItemType(Enum):
    ConfigurationUpdate = 'ConfigurationUpdate'
    StateUpdate = 'StateUpdate'
    Action = 'Action'


class HistorySummary(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class IncludeLinkedAccounts(RootModel[bool]):
    root: bool


class IncludeLinkedAccountsMetrics(RootModel[bool]):
    root: bool


class InsightRuleAggregationStatistic(RootModel[str]):
    root: str


class InsightRuleContributorKey(RootModel[str]):
    root: str


class InsightRuleContributorKeyLabel(RootModel[str]):
    root: str


class InsightRuleContributorKeyLabels(RootModel[List[InsightRuleContributorKeyLabel]]):
    root: List[InsightRuleContributorKeyLabel]


class InsightRuleContributorKeys(RootModel[List[InsightRuleContributorKey]]):
    root: List[InsightRuleContributorKey]


class InsightRuleDefinition(
    RootModel[constr(pattern=r'[\x00-\x7F]+', min_length=1, max_length=8192)]
):
    root: constr(pattern=r'[\x00-\x7F]+', min_length=1, max_length=8192)


class InsightRuleIsManaged(RootModel[bool]):
    root: bool


class InsightRuleMaxResults(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class InsightRuleMetricName(
    RootModel[constr(pattern=r'[\x20-\x7E]+', min_length=1, max_length=32)]
):
    root: constr(pattern=r'[\x20-\x7E]+', min_length=1, max_length=32)


class InsightRuleName(
    RootModel[constr(pattern=r'[\x20-\x7E]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\x20-\x7E]+', min_length=1, max_length=128)


class InsightRuleNames(RootModel[List[InsightRuleName]]):
    root: List[InsightRuleName]


class InsightRuleOrderBy(
    RootModel[constr(pattern=r'[\x20-\x7E]+', min_length=1, max_length=32)]
):
    root: constr(pattern=r'[\x20-\x7E]+', min_length=1, max_length=32)


class InsightRuleSchema(RootModel[str]):
    root: str


class InsightRuleState(
    RootModel[constr(pattern=r'[\x20-\x7E]+', min_length=1, max_length=32)]
):
    root: constr(pattern=r'[\x20-\x7E]+', min_length=1, max_length=32)


class InsightRuleUnboundDouble(RootModel[float]):
    root: float


class InsightRuleUnboundInteger(RootModel[int]):
    root: int


class InsightRuleUnboundLong(RootModel[int]):
    root: int


class InternalServiceFault(RootModel[Any]):
    root: Any


class InvalidFormatFault(RootModel[Any]):
    root: Any


class InvalidNextToken(RootModel[Any]):
    root: Any


class InvalidParameterCombinationException(RootModel[Any]):
    root: Any


class InvalidParameterValueException(RootModel[Any]):
    root: Any


class LabelOptions(BaseModel):
    Timezone: Optional[GetMetricDataLabelTimezone] = None


class LastModified(RootModel[datetime]):
    root: datetime


class LimitExceededException(RootModel[Any]):
    root: Any


class LimitExceededFault(RootModel[Any]):
    root: Any


class ListMetricStreamsMaxResults(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class ListTagsForResourceInput(BaseModel):
    ResourceARN: AmazonResourceName


class ManagedRuleState(BaseModel):
    RuleName: InsightRuleName
    State: InsightRuleState


class MaxRecords(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxReturnedResultsCount(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class Message(RootModel[str]):
    root: str


class MessageDataCode(RootModel[str]):
    root: str


class MessageDataValue(RootModel[str]):
    root: str


class MetricExpression(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class MetricId(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class MetricLabel(RootModel[str]):
    root: str


class MetricName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class MetricStreamName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class MetricStreamNames(RootModel[List[MetricStreamName]]):
    root: List[MetricStreamName]


class MetricStreamOutputFormat(Enum):
    json = 'json'
    opentelemetry0_7 = 'opentelemetry0.7'


class MetricStreamState(RootModel[str]):
    root: str


class MetricStreamStatistic(RootModel[str]):
    root: str


class MetricStreamStatisticsAdditionalStatistics(
    RootModel[List[MetricStreamStatistic]]
):
    root: List[MetricStreamStatistic]


class MetricWidget(RootModel[str]):
    root: str


class MetricWidgetImage(RootModel[str]):
    root: str


class MissingRequiredParameterException(RootModel[Any]):
    root: Any


class Namespace(RootModel[constr(pattern=r'[^:].*', min_length=1, max_length=255)]):
    root: constr(pattern=r'[^:].*', min_length=1, max_length=255)


class NextToken(RootModel[str]):
    root: str


class OutputFormat(RootModel[str]):
    root: str


class OwningAccounts(RootModel[List[AccountId]]):
    root: List[AccountId]


class PartialFailure(BaseModel):
    ExceptionType_1: Optional[ExceptionType] = Field(None, alias='ExceptionType')
    FailureCode_1: Optional[FailureCode] = Field(None, alias='FailureCode')
    FailureDescription_1: Optional[FailureDescription] = Field(
        None, alias='FailureDescription'
    )
    FailureResource_1: Optional[FailureResource] = Field(None, alias='FailureResource')


class Period(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PutAnomalyDetectorOutput(BaseModel):
    pass


class PutDashboardInput(BaseModel):
    DashboardBody_1: DashboardBody = Field(..., alias='DashboardBody')
    DashboardName_1: DashboardName = Field(..., alias='DashboardName')


class PutInsightRuleOutput(BaseModel):
    pass


class PutMetricStreamOutput(BaseModel):
    Arn: Optional[AmazonResourceName] = None


class RecentlyActive(Enum):
    PT3H = 'PT3H'


class ResourceName(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ResourceNotFound(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ReturnData(RootModel[bool]):
    root: bool


class ScanBy(Enum):
    TimestampDescending = 'TimestampDescending'
    TimestampAscending = 'TimestampAscending'


class Size(RootModel[int]):
    root: int


class StandardUnit(Enum):
    Seconds = 'Seconds'
    Microseconds = 'Microseconds'
    Milliseconds = 'Milliseconds'
    Bytes = 'Bytes'
    Kilobytes = 'Kilobytes'
    Megabytes = 'Megabytes'
    Gigabytes = 'Gigabytes'
    Terabytes = 'Terabytes'
    Bits = 'Bits'
    Kilobits = 'Kilobits'
    Megabits = 'Megabits'
    Gigabits = 'Gigabits'
    Terabits = 'Terabits'
    Percent = 'Percent'
    Count = 'Count'
    Bytes_Second = 'Bytes/Second'
    Kilobytes_Second = 'Kilobytes/Second'
    Megabytes_Second = 'Megabytes/Second'
    Gigabytes_Second = 'Gigabytes/Second'
    Terabytes_Second = 'Terabytes/Second'
    Bits_Second = 'Bits/Second'
    Kilobits_Second = 'Kilobits/Second'
    Megabits_Second = 'Megabits/Second'
    Gigabits_Second = 'Gigabits/Second'
    Terabits_Second = 'Terabits/Second'
    Count_Second = 'Count/Second'
    None_ = 'None'


class StartMetricStreamsInput(BaseModel):
    Names: MetricStreamNames


class StartMetricStreamsOutput(BaseModel):
    pass


class Stat(RootModel[str]):
    root: str


class StateReason(RootModel[constr(min_length=0, max_length=1023)]):
    root: constr(min_length=0, max_length=1023)


class StateReasonData(RootModel[constr(min_length=0, max_length=4000)]):
    root: constr(min_length=0, max_length=4000)


class StateValue(Enum):
    OK = 'OK'
    ALARM = 'ALARM'
    INSUFFICIENT_DATA = 'INSUFFICIENT_DATA'


class Statistic(Enum):
    SampleCount = 'SampleCount'
    Average = 'Average'
    Sum = 'Sum'
    Minimum = 'Minimum'
    Maximum = 'Maximum'


class StatisticSet(BaseModel):
    Maximum: DatapointValue
    Minimum: DatapointValue
    SampleCount: DatapointValue
    Sum: DatapointValue


class Statistics(RootModel[List[Statistic]]):
    root: List[Statistic] = Field(..., max_length=5, min_length=1)


class StatusCode(Enum):
    Complete = 'Complete'
    InternalError = 'InternalError'
    PartialData = 'PartialData'
    Forbidden = 'Forbidden'


class StopMetricStreamsInput(BaseModel):
    Names: MetricStreamNames


class StopMetricStreamsOutput(BaseModel):
    pass


class StorageResolution(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class SuppressorPeriod(RootModel[int]):
    root: int


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceOutput(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TemplateName(
    RootModel[
        constr(
            pattern=r'[0-9A-Za-z][\-\.\_0-9A-Za-z]{0,126}[0-9A-Za-z]',
            min_length=1,
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'[0-9A-Za-z][\-\.\_0-9A-Za-z]{0,126}[0-9A-Za-z]',
        min_length=1,
        max_length=128,
    )


class Threshold(RootModel[float]):
    root: float


class Timestamp(RootModel[datetime]):
    root: datetime


class Timestamps(RootModel[List[Timestamp]]):
    root: List[Timestamp]


class TreatMissingData(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class UntagResourceInput(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class UntagResourceOutput(BaseModel):
    pass


class Values(RootModel[List[DatapointValue]]):
    root: List[DatapointValue]


class Action(Enum):
    DeleteAlarms = 'DeleteAlarms'


class Version(Enum):
    field_2010_08_01 = '2010-08-01'


class Action4(Enum):
    DeleteAnomalyDetector = 'DeleteAnomalyDetector'


class Action8(Enum):
    DeleteDashboards = 'DeleteDashboards'


class Action12(Enum):
    DeleteInsightRules = 'DeleteInsightRules'


class RuleNames(RootModel[List[InsightRuleName]]):
    root: List[InsightRuleName]


class Action16(Enum):
    DeleteMetricStream = 'DeleteMetricStream'


class Action20(Enum):
    DescribeAlarmHistory = 'DescribeAlarmHistory'


class Action24(Enum):
    DescribeAlarms = 'DescribeAlarms'


class Unit(Enum):
    Seconds = 'Seconds'
    Microseconds = 'Microseconds'
    Milliseconds = 'Milliseconds'
    Bytes = 'Bytes'
    Kilobytes = 'Kilobytes'
    Megabytes = 'Megabytes'
    Gigabytes = 'Gigabytes'
    Terabytes = 'Terabytes'
    Bits = 'Bits'
    Kilobits = 'Kilobits'
    Megabits = 'Megabits'
    Gigabits = 'Gigabits'
    Terabits = 'Terabits'
    Percent = 'Percent'
    Count = 'Count'
    Bytes_Second = 'Bytes/Second'
    Kilobytes_Second = 'Kilobytes/Second'
    Megabytes_Second = 'Megabytes/Second'
    Gigabytes_Second = 'Gigabytes/Second'
    Terabytes_Second = 'Terabytes/Second'
    Bits_Second = 'Bits/Second'
    Kilobits_Second = 'Kilobits/Second'
    Megabits_Second = 'Megabits/Second'
    Gigabits_Second = 'Gigabits/Second'
    Terabits_Second = 'Terabits/Second'
    Count_Second = 'Count/Second'
    None_ = 'None'


class Action28(Enum):
    DescribeAlarmsForMetric = 'DescribeAlarmsForMetric'


class Action32(Enum):
    DescribeAnomalyDetectors = 'DescribeAnomalyDetectors'


class Action36(Enum):
    DescribeInsightRules = 'DescribeInsightRules'


class Action40(Enum):
    DisableAlarmActions = 'DisableAlarmActions'


class Action44(Enum):
    DisableInsightRules = 'DisableInsightRules'


class Action48(Enum):
    EnableAlarmActions = 'EnableAlarmActions'


class Action52(Enum):
    EnableInsightRules = 'EnableInsightRules'


class Action56(Enum):
    GetDashboard = 'GetDashboard'


class Action60(Enum):
    GetInsightRuleReport = 'GetInsightRuleReport'


class Metrics1(RootModel[List[InsightRuleMetricName]]):
    root: List[InsightRuleMetricName]


class Action64(Enum):
    GetMetricData = 'GetMetricData'


class Action68(Enum):
    GetMetricStatistics = 'GetMetricStatistics'


class Action72(Enum):
    GetMetricStream = 'GetMetricStream'


class Action76(Enum):
    GetMetricWidgetImage = 'GetMetricWidgetImage'


class Action80(Enum):
    ListDashboards = 'ListDashboards'


class Action84(Enum):
    ListManagedInsightRules = 'ListManagedInsightRules'


class Action88(Enum):
    ListMetricStreams = 'ListMetricStreams'


class Action92(Enum):
    ListMetrics = 'ListMetrics'


class Action96(Enum):
    ListTagsForResource = 'ListTagsForResource'


class Action100(Enum):
    PutAnomalyDetector = 'PutAnomalyDetector'


class Action104(Enum):
    PutCompositeAlarm = 'PutCompositeAlarm'


class AlarmActions(RootModel[List[ResourceName]]):
    root: List[ResourceName] = Field(..., max_length=5)


class InsufficientDataActions(RootModel[List[ResourceName]]):
    root: List[ResourceName] = Field(..., max_length=5)


class OKActions(RootModel[List[ResourceName]]):
    root: List[ResourceName] = Field(..., max_length=5)


class Action108(Enum):
    PutDashboard = 'PutDashboard'


class Action112(Enum):
    PutInsightRule = 'PutInsightRule'


class Action116(Enum):
    PutManagedInsightRules = 'PutManagedInsightRules'


class Action120(Enum):
    PutMetricAlarm = 'PutMetricAlarm'


class Action124(Enum):
    PutMetricData = 'PutMetricData'


class OutputFormat1(Enum):
    json = 'json'
    opentelemetry0_7 = 'opentelemetry0.7'


class Action128(Enum):
    PutMetricStream = 'PutMetricStream'


class Action132(Enum):
    SetAlarmState = 'SetAlarmState'


class Action136(Enum):
    StartMetricStreams = 'StartMetricStreams'


class Names(RootModel[List[MetricStreamName]]):
    root: List[MetricStreamName]


class Action140(Enum):
    StopMetricStreams = 'StopMetricStreams'


class Action144(Enum):
    TagResource = 'TagResource'


class Action148(Enum):
    UntagResource = 'UntagResource'


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey]


class AlarmHistoryItem(BaseModel):
    AlarmName_1: Optional[AlarmName] = Field(None, alias='AlarmName')
    AlarmType_1: Optional[AlarmType] = Field(None, alias='AlarmType')
    HistoryData_1: Optional[HistoryData] = Field(None, alias='HistoryData')
    HistoryItemType_1: Optional[HistoryItemType] = Field(None, alias='HistoryItemType')
    HistorySummary_1: Optional[HistorySummary] = Field(None, alias='HistorySummary')
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class AlarmHistoryItems(RootModel[List[AlarmHistoryItem]]):
    root: List[AlarmHistoryItem]


class BatchFailures(RootModel[List[PartialFailure]]):
    root: List[PartialFailure]


class Counts(RootModel[List[DatapointValue]]):
    root: List[DatapointValue]


class DashboardEntry(BaseModel):
    DashboardArn_1: Optional[DashboardArn] = Field(None, alias='DashboardArn')
    DashboardName_1: Optional[DashboardName] = Field(None, alias='DashboardName')
    LastModified_1: Optional[LastModified] = Field(None, alias='LastModified')
    Size_1: Optional[Size] = Field(None, alias='Size')


class DashboardValidationMessage(BaseModel):
    DataPath_1: Optional[DataPath] = Field(None, alias='DataPath')
    Message_1: Optional[Message] = Field(None, alias='Message')


class DashboardValidationMessages(RootModel[List[DashboardValidationMessage]]):
    root: List[DashboardValidationMessage]


class Datapoint(BaseModel):
    Average: Optional[DatapointValue] = None
    ExtendedStatistics: Optional[DatapointValueMap] = None
    Maximum: Optional[DatapointValue] = None
    Minimum: Optional[DatapointValue] = None
    SampleCount: Optional[DatapointValue] = None
    Sum: Optional[DatapointValue] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')
    Unit: Optional[StandardUnit] = None


class Datapoints(RootModel[List[Datapoint]]):
    root: List[Datapoint]


class DeleteInsightRulesInput(BaseModel):
    RuleNames: InsightRuleNames


class DeleteInsightRulesOutput(BaseModel):
    Failures: Optional[BatchFailures] = None


class DeleteMetricStreamInput(BaseModel):
    Name: MetricStreamName


class DescribeAlarmHistoryInput(BaseModel):
    AlarmName_1: Optional[AlarmName] = Field(None, alias='AlarmName')
    AlarmTypes_1: Optional[AlarmTypes] = Field(None, alias='AlarmTypes')
    EndDate: Optional[Timestamp] = None
    HistoryItemType_1: Optional[HistoryItemType] = Field(None, alias='HistoryItemType')
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ScanBy_1: Optional[ScanBy] = Field(None, alias='ScanBy')
    StartDate: Optional[Timestamp] = None


class DescribeAlarmHistoryOutput(BaseModel):
    AlarmHistoryItems_1: Optional[AlarmHistoryItems] = Field(
        None, alias='AlarmHistoryItems'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAlarmsInput(BaseModel):
    ActionPrefix_1: Optional[ActionPrefix] = Field(None, alias='ActionPrefix')
    AlarmNamePrefix_1: Optional[AlarmNamePrefix] = Field(None, alias='AlarmNamePrefix')
    AlarmNames_1: Optional[AlarmNames] = Field(None, alias='AlarmNames')
    AlarmTypes_1: Optional[AlarmTypes] = Field(None, alias='AlarmTypes')
    ChildrenOfAlarmName: Optional[AlarmName] = None
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ParentsOfAlarmName: Optional[AlarmName] = None
    StateValue_1: Optional[StateValue] = Field(None, alias='StateValue')


class DescribeInsightRulesInput(BaseModel):
    MaxResults: Optional[InsightRuleMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class Dimension(BaseModel):
    Name: DimensionName
    Value: DimensionValue


class DimensionFilter(BaseModel):
    Name: DimensionName
    Value: Optional[DimensionValue] = None


class DimensionFilters(RootModel[List[DimensionFilter]]):
    root: List[DimensionFilter] = Field(..., max_length=10)


class Dimensions(RootModel[List[Dimension]]):
    root: List[Dimension] = Field(..., max_length=30)


class DisableInsightRulesInput(BaseModel):
    RuleNames: InsightRuleNames


class DisableInsightRulesOutput(BaseModel):
    Failures: Optional[BatchFailures] = None


class EnableInsightRulesInput(BaseModel):
    RuleNames: InsightRuleNames


class EnableInsightRulesOutput(BaseModel):
    Failures: Optional[BatchFailures] = None


class GetMetricStatisticsInput(BaseModel):
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    EndTime: Timestamp
    ExtendedStatistics_1: Optional[ExtendedStatistics] = Field(
        None, alias='ExtendedStatistics'
    )
    MetricName_1: MetricName = Field(..., alias='MetricName')
    Namespace_1: Namespace = Field(..., alias='Namespace')
    Period_1: Period = Field(..., alias='Period')
    StartTime: Timestamp
    Statistics_1: Optional[Statistics] = Field(None, alias='Statistics')
    Unit: Optional[StandardUnit] = None


class GetMetricStatisticsOutput(BaseModel):
    Datapoints_1: Optional[Datapoints] = Field(None, alias='Datapoints')
    Label: Optional[MetricLabel] = None


class GetMetricStreamInput(BaseModel):
    Name: MetricStreamName


class GetMetricWidgetImageInput(BaseModel):
    MetricWidget_1: MetricWidget = Field(..., alias='MetricWidget')
    OutputFormat_1: Optional[OutputFormat] = Field(None, alias='OutputFormat')


class GetMetricWidgetImageOutput(BaseModel):
    MetricWidgetImage_1: Optional[MetricWidgetImage] = Field(
        None, alias='MetricWidgetImage'
    )


class InsightRule(BaseModel):
    Definition: InsightRuleDefinition
    ManagedRule: Optional[InsightRuleIsManaged] = None
    Name: InsightRuleName
    Schema: InsightRuleSchema
    State: InsightRuleState


class InsightRuleContributorDatapoint(BaseModel):
    ApproximateValue: InsightRuleUnboundDouble
    Timestamp_1: Timestamp = Field(..., alias='Timestamp')


class InsightRuleContributorDatapoints(
    RootModel[List[InsightRuleContributorDatapoint]]
):
    root: List[InsightRuleContributorDatapoint]


class InsightRuleMetricDatapoint(BaseModel):
    Average: Optional[InsightRuleUnboundDouble] = None
    MaxContributorValue: Optional[InsightRuleUnboundDouble] = None
    Maximum: Optional[InsightRuleUnboundDouble] = None
    Minimum: Optional[InsightRuleUnboundDouble] = None
    SampleCount: Optional[InsightRuleUnboundDouble] = None
    Sum: Optional[InsightRuleUnboundDouble] = None
    Timestamp_1: Timestamp = Field(..., alias='Timestamp')
    UniqueContributors: Optional[InsightRuleUnboundDouble] = None


class InsightRuleMetricDatapoints(RootModel[List[InsightRuleMetricDatapoint]]):
    root: List[InsightRuleMetricDatapoint]


class InsightRuleMetricList(RootModel[List[InsightRuleMetricName]]):
    root: List[InsightRuleMetricName]


class InsightRules(RootModel[List[InsightRule]]):
    root: List[InsightRule]


class ListDashboardsInput(BaseModel):
    DashboardNamePrefix_1: Optional[DashboardNamePrefix] = Field(
        None, alias='DashboardNamePrefix'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListManagedInsightRulesInput(BaseModel):
    MaxResults: Optional[InsightRuleMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceARN: AmazonResourceName


class ListMetricStreamsInput(BaseModel):
    MaxResults: Optional[ListMetricStreamsMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMetricsInput(BaseModel):
    Dimensions: Optional[DimensionFilters] = None
    IncludeLinkedAccounts_1: Optional[IncludeLinkedAccounts] = Field(
        None, alias='IncludeLinkedAccounts'
    )
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    OwningAccount: Optional[AccountId] = None
    RecentlyActive_1: Optional[RecentlyActive] = Field(None, alias='RecentlyActive')


class ManagedRuleDescription(BaseModel):
    ResourceARN: Optional[AmazonResourceName] = None
    RuleState: Optional[ManagedRuleState] = None
    TemplateName_1: Optional[TemplateName] = Field(None, alias='TemplateName')


class ManagedRuleDescriptions(RootModel[List[ManagedRuleDescription]]):
    root: List[ManagedRuleDescription]


class MessageData(BaseModel):
    Code: Optional[MessageDataCode] = None
    Value: Optional[MessageDataValue] = None


class Metric(BaseModel):
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')


class MetricDataResultMessages(RootModel[List[MessageData]]):
    root: List[MessageData]


class MetricDatum(BaseModel):
    Counts_1: Optional[Counts] = Field(None, alias='Counts')
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    MetricName_1: MetricName = Field(..., alias='MetricName')
    StatisticValues: Optional[StatisticSet] = None
    StorageResolution_1: Optional[StorageResolution] = Field(
        None, alias='StorageResolution'
    )
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')
    Unit: Optional[StandardUnit] = None
    Value: Optional[DatapointValue] = None
    Values_1: Optional[Values] = Field(None, alias='Values')


class MetricStat(BaseModel):
    Metric_1: Metric = Field(..., alias='Metric')
    Period_1: Period = Field(..., alias='Period')
    Stat_1: Stat = Field(..., alias='Stat')
    Unit: Optional[StandardUnit] = None


class MetricStreamEntry(BaseModel):
    Arn: Optional[AmazonResourceName] = None
    CreationDate: Optional[Timestamp] = None
    FirehoseArn: Optional[AmazonResourceName] = None
    LastUpdateDate: Optional[Timestamp] = None
    Name: Optional[MetricStreamName] = None
    OutputFormat: Optional[MetricStreamOutputFormat] = None
    State: Optional[MetricStreamState] = None


class MetricStreamFilter(BaseModel):
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')


class MetricStreamFilters(RootModel[List[MetricStreamFilter]]):
    root: List[MetricStreamFilter]


class MetricStreamStatisticsMetric(BaseModel):
    MetricName_1: MetricName = Field(..., alias='MetricName')
    Namespace_1: Namespace = Field(..., alias='Namespace')


class Metrics(RootModel[List[Metric]]):
    root: List[Metric]


class PutDashboardOutput(BaseModel):
    DashboardValidationMessages_1: Optional[DashboardValidationMessages] = Field(
        None, alias='DashboardValidationMessages'
    )


class PutManagedInsightRulesOutput(BaseModel):
    Failures: Optional[BatchFailures] = None


class Range(BaseModel):
    EndTime: Timestamp
    StartTime: Timestamp


class ResourceList(RootModel[List[ResourceName]]):
    root: List[ResourceName] = Field(..., max_length=5)


class SetAlarmStateInput(BaseModel):
    AlarmName_1: AlarmName = Field(..., alias='AlarmName')
    StateReason_1: StateReason = Field(..., alias='StateReason')
    StateReasonData_1: Optional[StateReasonData] = Field(None, alias='StateReasonData')
    StateValue_1: StateValue = Field(..., alias='StateValue')


class SingleMetricAnomalyDetector(BaseModel):
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    Stat: Optional[AnomalyDetectorMetricStat] = None


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceInput(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagList


class Dimensions5(RootModel[List[DimensionFilter]]):
    root: List[DimensionFilter] = Field(..., max_length=10)


class Dimensions6(RootModel[List[Dimension]]):
    root: List[Dimension] = Field(..., max_length=30)


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class MetricData(RootModel[List[MetricDatum]]):
    root: List[MetricDatum]


class IncludeFilters(RootModel[List[MetricStreamFilter]]):
    root: List[MetricStreamFilter]


class ExcludeFilters(RootModel[List[MetricStreamFilter]]):
    root: List[MetricStreamFilter]


class AnomalyDetectorExcludedTimeRanges(RootModel[List[Range]]):
    root: List[Range]


class CompositeAlarm(BaseModel):
    ActionsEnabled_1: Optional[ActionsEnabled] = Field(None, alias='ActionsEnabled')
    ActionsSuppressedBy_1: Optional[ActionsSuppressedBy] = Field(
        None, alias='ActionsSuppressedBy'
    )
    ActionsSuppressedReason_1: Optional[ActionsSuppressedReason] = Field(
        None, alias='ActionsSuppressedReason'
    )
    ActionsSuppressor: Optional[AlarmArn] = None
    ActionsSuppressorExtensionPeriod: Optional[SuppressorPeriod] = None
    ActionsSuppressorWaitPeriod: Optional[SuppressorPeriod] = None
    AlarmActions: Optional[ResourceList] = None
    AlarmArn_1: Optional[AlarmArn] = Field(None, alias='AlarmArn')
    AlarmConfigurationUpdatedTimestamp: Optional[Timestamp] = None
    AlarmDescription_1: Optional[AlarmDescription] = Field(
        None, alias='AlarmDescription'
    )
    AlarmName_1: Optional[AlarmName] = Field(None, alias='AlarmName')
    AlarmRule_1: Optional[AlarmRule] = Field(None, alias='AlarmRule')
    InsufficientDataActions: Optional[ResourceList] = None
    OKActions: Optional[ResourceList] = None
    StateReason_1: Optional[StateReason] = Field(None, alias='StateReason')
    StateReasonData_1: Optional[StateReasonData] = Field(None, alias='StateReasonData')
    StateTransitionedTimestamp: Optional[Timestamp] = None
    StateUpdatedTimestamp: Optional[Timestamp] = None
    StateValue_1: Optional[StateValue] = Field(None, alias='StateValue')


class CompositeAlarms(RootModel[List[CompositeAlarm]]):
    root: List[CompositeAlarm]


class DashboardEntries(RootModel[List[DashboardEntry]]):
    root: List[DashboardEntry]


class DescribeAlarmsForMetricInput(BaseModel):
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    ExtendedStatistic_1: Optional[ExtendedStatistic] = Field(
        None, alias='ExtendedStatistic'
    )
    MetricName_1: MetricName = Field(..., alias='MetricName')
    Namespace_1: Namespace = Field(..., alias='Namespace')
    Period_1: Optional[Period] = Field(None, alias='Period')
    Statistic_1: Optional[Statistic] = Field(None, alias='Statistic')
    Unit: Optional[StandardUnit] = None


class DescribeAnomalyDetectorsInput(BaseModel):
    AnomalyDetectorTypes_1: Optional[AnomalyDetectorTypes] = Field(
        None, alias='AnomalyDetectorTypes'
    )
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    MaxResults: Optional[MaxReturnedResultsCount] = None
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInsightRulesOutput(BaseModel):
    InsightRules_1: Optional[InsightRules] = Field(None, alias='InsightRules')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetInsightRuleReportInput(BaseModel):
    EndTime: Timestamp
    MaxContributorCount: Optional[InsightRuleUnboundInteger] = None
    Metrics: Optional[InsightRuleMetricList] = None
    OrderBy: Optional[InsightRuleOrderBy] = None
    Period_1: Period = Field(..., alias='Period')
    RuleName: InsightRuleName
    StartTime: Timestamp


class InsightRuleContributor(BaseModel):
    ApproximateAggregateValue: InsightRuleUnboundDouble
    Datapoints: InsightRuleContributorDatapoints
    Keys: InsightRuleContributorKeys


class InsightRuleContributors(RootModel[List[InsightRuleContributor]]):
    root: List[InsightRuleContributor]


class ListDashboardsOutput(BaseModel):
    DashboardEntries_1: Optional[DashboardEntries] = Field(
        None, alias='DashboardEntries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListManagedInsightRulesOutput(BaseModel):
    ManagedRules: Optional[ManagedRuleDescriptions] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMetricsOutput(BaseModel):
    Metrics_1: Optional[Metrics] = Field(None, alias='Metrics')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    OwningAccounts_1: Optional[OwningAccounts] = Field(None, alias='OwningAccounts')


class ListTagsForResourceOutput(BaseModel):
    Tags: Optional[TagList] = None


class ManagedRule(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: Optional[TagList] = None
    TemplateName_1: TemplateName = Field(..., alias='TemplateName')


class ManagedRules(RootModel[List[ManagedRule]]):
    root: List[ManagedRule]


class MetricDataQuery(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    Expression: Optional[MetricExpression] = None
    Id: MetricId
    Label: Optional[MetricLabel] = None
    MetricStat_1: Optional[MetricStat] = Field(None, alias='MetricStat')
    Period_1: Optional[Period] = Field(None, alias='Period')
    ReturnData_1: Optional[ReturnData] = Field(None, alias='ReturnData')


class MetricDataResult(BaseModel):
    Id: Optional[MetricId] = None
    Label: Optional[MetricLabel] = None
    Messages: Optional[MetricDataResultMessages] = None
    StatusCode_1: Optional[StatusCode] = Field(None, alias='StatusCode')
    Timestamps_1: Optional[Timestamps] = Field(None, alias='Timestamps')
    Values: Optional[DatapointValues] = None


class MetricDataResults(RootModel[List[MetricDataResult]]):
    root: List[MetricDataResult]


class MetricStreamEntries(RootModel[List[MetricStreamEntry]]):
    root: List[MetricStreamEntry]


class MetricStreamStatisticsIncludeMetrics(
    RootModel[List[MetricStreamStatisticsMetric]]
):
    root: List[MetricStreamStatisticsMetric]


class PutCompositeAlarmInput(BaseModel):
    ActionsEnabled_1: Optional[ActionsEnabled] = Field(None, alias='ActionsEnabled')
    ActionsSuppressor: Optional[AlarmArn] = None
    ActionsSuppressorExtensionPeriod: Optional[SuppressorPeriod] = None
    ActionsSuppressorWaitPeriod: Optional[SuppressorPeriod] = None
    AlarmActions: Optional[ResourceList] = None
    AlarmDescription_1: Optional[AlarmDescription] = Field(
        None, alias='AlarmDescription'
    )
    AlarmName_1: AlarmName = Field(..., alias='AlarmName')
    AlarmRule_1: AlarmRule = Field(..., alias='AlarmRule')
    InsufficientDataActions: Optional[ResourceList] = None
    OKActions: Optional[ResourceList] = None
    Tags: Optional[TagList] = None


class PutInsightRuleInput(BaseModel):
    RuleDefinition: InsightRuleDefinition
    RuleName: InsightRuleName
    RuleState: Optional[InsightRuleState] = None
    Tags: Optional[TagList] = None


class PutManagedInsightRulesInput(BaseModel):
    ManagedRules_1: ManagedRules = Field(..., alias='ManagedRules')


class PutMetricDataInput(BaseModel):
    MetricData_1: MetricData = Field(..., alias='MetricData')
    Namespace_1: Namespace = Field(..., alias='Namespace')


class MetricDataQueries(RootModel[List[MetricDataQuery]]):
    root: List[MetricDataQuery]


class Configuration(BaseModel):
    ExcludedTimeRanges: Optional[AnomalyDetectorExcludedTimeRanges] = None
    MetricTimezone: Optional[AnomalyDetectorMetricTimezone] = None


class Metrics2(RootModel[List[MetricDataQuery]]):
    root: List[MetricDataQuery]


class AnomalyDetectorConfiguration(BaseModel):
    ExcludedTimeRanges: Optional[AnomalyDetectorExcludedTimeRanges] = None
    MetricTimezone: Optional[AnomalyDetectorMetricTimezone] = None


class GetInsightRuleReportOutput(BaseModel):
    AggregateValue: Optional[InsightRuleUnboundDouble] = None
    AggregationStatistic: Optional[InsightRuleAggregationStatistic] = None
    ApproximateUniqueCount: Optional[InsightRuleUnboundLong] = None
    Contributors: Optional[InsightRuleContributors] = None
    KeyLabels: Optional[InsightRuleContributorKeyLabels] = None
    MetricDatapoints: Optional[InsightRuleMetricDatapoints] = None


class GetMetricDataOutput(BaseModel):
    Messages: Optional[MetricDataResultMessages] = None
    MetricDataResults_1: Optional[MetricDataResults] = Field(
        None, alias='MetricDataResults'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMetricStreamsOutput(BaseModel):
    Entries: Optional[MetricStreamEntries] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class MetricMathAnomalyDetector(BaseModel):
    MetricDataQueries_1: Optional[MetricDataQueries] = Field(
        None, alias='MetricDataQueries'
    )


class MetricStreamStatisticsConfiguration(BaseModel):
    AdditionalStatistics: MetricStreamStatisticsAdditionalStatistics
    IncludeMetrics: MetricStreamStatisticsIncludeMetrics


class MetricStreamStatisticsConfigurations(
    RootModel[List[MetricStreamStatisticsConfiguration]]
):
    root: List[MetricStreamStatisticsConfiguration]


class PutAnomalyDetectorInput(BaseModel):
    Configuration: Optional[AnomalyDetectorConfiguration] = None
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    MetricMathAnomalyDetector_1: Optional[MetricMathAnomalyDetector] = Field(
        None, alias='MetricMathAnomalyDetector'
    )
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    SingleMetricAnomalyDetector_1: Optional[SingleMetricAnomalyDetector] = Field(
        None, alias='SingleMetricAnomalyDetector'
    )
    Stat: Optional[AnomalyDetectorMetricStat] = None


class PutMetricAlarmInput(BaseModel):
    ActionsEnabled_1: Optional[ActionsEnabled] = Field(None, alias='ActionsEnabled')
    AlarmActions: Optional[ResourceList] = None
    AlarmDescription_1: Optional[AlarmDescription] = Field(
        None, alias='AlarmDescription'
    )
    AlarmName_1: AlarmName = Field(..., alias='AlarmName')
    ComparisonOperator_1: ComparisonOperator = Field(..., alias='ComparisonOperator')
    DatapointsToAlarm_1: Optional[DatapointsToAlarm] = Field(
        None, alias='DatapointsToAlarm'
    )
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    EvaluateLowSampleCountPercentile_1: Optional[EvaluateLowSampleCountPercentile] = (
        Field(None, alias='EvaluateLowSampleCountPercentile')
    )
    EvaluationPeriods_1: EvaluationPeriods = Field(..., alias='EvaluationPeriods')
    ExtendedStatistic_1: Optional[ExtendedStatistic] = Field(
        None, alias='ExtendedStatistic'
    )
    InsufficientDataActions: Optional[ResourceList] = None
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Metrics: Optional[MetricDataQueries] = None
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    OKActions: Optional[ResourceList] = None
    Period_1: Optional[Period] = Field(None, alias='Period')
    Statistic_1: Optional[Statistic] = Field(None, alias='Statistic')
    Tags: Optional[TagList] = None
    Threshold_1: Optional[Threshold] = Field(None, alias='Threshold')
    ThresholdMetricId: Optional[MetricId] = None
    TreatMissingData_1: Optional[TreatMissingData] = Field(
        None, alias='TreatMissingData'
    )
    Unit: Optional[StandardUnit] = None


class PutMetricStreamInput(BaseModel):
    ExcludeFilters: Optional[MetricStreamFilters] = None
    FirehoseArn: AmazonResourceName
    IncludeFilters: Optional[MetricStreamFilters] = None
    IncludeLinkedAccountsMetrics_1: Optional[IncludeLinkedAccountsMetrics] = Field(
        None, alias='IncludeLinkedAccountsMetrics'
    )
    Name: MetricStreamName
    OutputFormat: MetricStreamOutputFormat
    RoleArn: AmazonResourceName
    StatisticsConfigurations: Optional[MetricStreamStatisticsConfigurations] = None
    Tags: Optional[TagList] = None


class StatisticsConfigurations(RootModel[List[MetricStreamStatisticsConfiguration]]):
    root: List[MetricStreamStatisticsConfiguration]


class AnomalyDetector(BaseModel):
    Configuration: Optional[AnomalyDetectorConfiguration] = None
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    MetricMathAnomalyDetector_1: Optional[MetricMathAnomalyDetector] = Field(
        None, alias='MetricMathAnomalyDetector'
    )
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    SingleMetricAnomalyDetector_1: Optional[SingleMetricAnomalyDetector] = Field(
        None, alias='SingleMetricAnomalyDetector'
    )
    Stat: Optional[AnomalyDetectorMetricStat] = None
    StateValue: Optional[AnomalyDetectorStateValue] = None


class AnomalyDetectors(RootModel[List[AnomalyDetector]]):
    root: List[AnomalyDetector]


class DeleteAnomalyDetectorInput(BaseModel):
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    MetricMathAnomalyDetector_1: Optional[MetricMathAnomalyDetector] = Field(
        None, alias='MetricMathAnomalyDetector'
    )
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    SingleMetricAnomalyDetector_1: Optional[SingleMetricAnomalyDetector] = Field(
        None, alias='SingleMetricAnomalyDetector'
    )
    Stat: Optional[AnomalyDetectorMetricStat] = None


class DescribeAnomalyDetectorsOutput(BaseModel):
    AnomalyDetectors_1: Optional[AnomalyDetectors] = Field(
        None, alias='AnomalyDetectors'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetMetricDataInput(BaseModel):
    EndTime: Timestamp
    LabelOptions_1: Optional[LabelOptions] = Field(None, alias='LabelOptions')
    MaxDatapoints: Optional[GetMetricDataMaxDatapoints] = None
    MetricDataQueries_1: MetricDataQueries = Field(..., alias='MetricDataQueries')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ScanBy_1: Optional[ScanBy] = Field(None, alias='ScanBy')
    StartTime: Timestamp


class GetMetricStreamOutput(BaseModel):
    Arn: Optional[AmazonResourceName] = None
    CreationDate: Optional[Timestamp] = None
    ExcludeFilters: Optional[MetricStreamFilters] = None
    FirehoseArn: Optional[AmazonResourceName] = None
    IncludeFilters: Optional[MetricStreamFilters] = None
    IncludeLinkedAccountsMetrics_1: Optional[IncludeLinkedAccountsMetrics] = Field(
        None, alias='IncludeLinkedAccountsMetrics'
    )
    LastUpdateDate: Optional[Timestamp] = None
    Name: Optional[MetricStreamName] = None
    OutputFormat: Optional[MetricStreamOutputFormat] = None
    RoleArn: Optional[AmazonResourceName] = None
    State: Optional[MetricStreamState] = None
    StatisticsConfigurations: Optional[MetricStreamStatisticsConfigurations] = None


class MetricAlarm(BaseModel):
    ActionsEnabled_1: Optional[ActionsEnabled] = Field(None, alias='ActionsEnabled')
    AlarmActions: Optional[ResourceList] = None
    AlarmArn_1: Optional[AlarmArn] = Field(None, alias='AlarmArn')
    AlarmConfigurationUpdatedTimestamp: Optional[Timestamp] = None
    AlarmDescription_1: Optional[AlarmDescription] = Field(
        None, alias='AlarmDescription'
    )
    AlarmName_1: Optional[AlarmName] = Field(None, alias='AlarmName')
    ComparisonOperator_1: Optional[ComparisonOperator] = Field(
        None, alias='ComparisonOperator'
    )
    DatapointsToAlarm_1: Optional[DatapointsToAlarm] = Field(
        None, alias='DatapointsToAlarm'
    )
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    EvaluateLowSampleCountPercentile_1: Optional[EvaluateLowSampleCountPercentile] = (
        Field(None, alias='EvaluateLowSampleCountPercentile')
    )
    EvaluationPeriods_1: Optional[EvaluationPeriods] = Field(
        None, alias='EvaluationPeriods'
    )
    EvaluationState_1: Optional[EvaluationState] = Field(None, alias='EvaluationState')
    ExtendedStatistic_1: Optional[ExtendedStatistic] = Field(
        None, alias='ExtendedStatistic'
    )
    InsufficientDataActions: Optional[ResourceList] = None
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Metrics: Optional[MetricDataQueries] = None
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    OKActions: Optional[ResourceList] = None
    Period_1: Optional[Period] = Field(None, alias='Period')
    StateReason_1: Optional[StateReason] = Field(None, alias='StateReason')
    StateReasonData_1: Optional[StateReasonData] = Field(None, alias='StateReasonData')
    StateTransitionedTimestamp: Optional[Timestamp] = None
    StateUpdatedTimestamp: Optional[Timestamp] = None
    StateValue_1: Optional[StateValue] = Field(None, alias='StateValue')
    Statistic_1: Optional[Statistic] = Field(None, alias='Statistic')
    Threshold_1: Optional[Threshold] = Field(None, alias='Threshold')
    ThresholdMetricId: Optional[MetricId] = None
    TreatMissingData_1: Optional[TreatMissingData] = Field(
        None, alias='TreatMissingData'
    )
    Unit: Optional[StandardUnit] = None


class MetricAlarms(RootModel[List[MetricAlarm]]):
    root: List[MetricAlarm]


class DescribeAlarmsForMetricOutput(BaseModel):
    MetricAlarms_1: Optional[MetricAlarms] = Field(None, alias='MetricAlarms')


class DescribeAlarmsOutput(BaseModel):
    CompositeAlarms_1: Optional[CompositeAlarms] = Field(None, alias='CompositeAlarms')
    MetricAlarms_1: Optional[MetricAlarms] = Field(None, alias='MetricAlarms')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
